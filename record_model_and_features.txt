
모델 파라미터 및 피쳐 정리

--------------------------------
TimeSeriesSplit, LGB - 0.75514

2020-03-18 23:42:12.575420
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('num_leaves', 1000)
('colsample_bytree', 0.8)
('subsample', 0.8)
('n_estimators', 2500)
('learning_rate', 0.01)
('n_jobs', -1)
('device', 'cpu')
--------------------------------
LGB - KFold - 0.59797

2020-03-19 16:52:21.762531
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.02)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 2500)
('n_jobs', -1)
('num_leaves', 2000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------
LGB - KFold - 0.57549
2020-03-20 21:33:54.294536  
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.02)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 4000)
('n_jobs', -1)
('num_leaves', 4000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------
XGB - KFold - 0.57549
2020-03-21 22:17:37.999284 / 0.76278
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  
('objective', 'reg:squarederror')
('base_score', 0.5)
('booster', None)
('colsample_bylevel', 1)
('colsample_bynode', 1)
('colsample_bytree', 0.3)
('gamma', 0)
('gpu_id', 0)
('importance_type', 'gain')
('interaction_constraints', None)
('learning_rate', 0.1)
('max_delta_step', 0)
('max_depth', 5)
('min_child_weight', 1)
('missing', nan)
('monotone_constraints', None)
('n_estimators', 10000)
('n_jobs', 0)
('num_parallel_tree', 1)
('random_state', 0)
('reg_alpha', 10)
('reg_lambda', 1)
('scale_pos_weight', 1)
('subsample', 1)
('tree_method', 'gpu_hist')
('validate_parameters', False)
('verbosity', None)
('alpha', 10)
--------------------------------
LGB - KFold - 0.60858
2020-03-22 12:05:54.294536  
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.2)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 400)
('n_jobs', -1)
('num_leaves', 400)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-22 13:47:34.970959 - 0.59960
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.2)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 400)
('n_jobs', -1)
('num_leaves', 800)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-22 15:07:33.497121 0.59846
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.2)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 450)
('n_jobs', -1)
('num_leaves', 4000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-22 16:21:31.527603 - 0.56821
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.2)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 500)
('n_jobs', -1)
('num_leaves', 4000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-22 20:03:51.781702 - 0.57434

오버피팅 시키려고 n_estimators를 5000까지 늘렸었음
대부분 800 전후에서 종료됨.
0.57434 - 오버피팅되서 점수 낮아짐을 확인

item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.2)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 5000)
('n_jobs', -1)
('num_leaves', 4000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-23 12:18:57.805641 - 0.56696
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.2)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 600)
('n_jobs', -1)
('num_leaves', 4000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-23 15:11:58.662533

모든 주차로 train시키는 것이 아닌,
test셋과 똑같은 주차로만 train 시킴.(각년도 4~5월) - 0.66251

item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.2)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 600)
('n_jobs', -1)
('num_leaves', 4000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-23 15:48:16.573343 - 0.72705 - 오히려 과소적합되어있음을 확인
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.01)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 400)
('n_jobs', -1)
('num_leaves', 4000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-23 16:29:16.467616 - 0.79413 n_estimators를 조절해야하는데 실수로 num_leaves를 조절해버림..
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.01)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 400)
('n_jobs', -1)
('num_leaves', 600)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------

2020-03-23 22:12:08.574824 - 0.69743
item_id  dept_id  cat_id  store_id  
state_id  year  month  week  day  
weekday  event_name_1  event_type_1  snap_CA  snap_TX  
snap_WI  sell_price  lag_t28  lag_t29  lag_t30  
rolling_mean_t7  rolling_std_t7  rolling_mean_t30  rolling_mean_t90  rolling_mean_t180  
rolling_std_t30  price_change_t1  price_change_t365  rolling_price_std_t7  rolling_price_std_t30  
('boosting_type', 'gbdt')
('class_weight', None)
('colsample_bytree', 0.8)
('importance_type', 'split')
('learning_rate', 0.01)
('max_depth', -1)
('min_child_samples', 20)
('min_child_weight', 0.001)
('min_split_gain', 0.0)
('n_estimators', 400)
('n_jobs', -1)
('num_leaves', 4000)
('objective', None)
('random_state', None)
('reg_alpha', 0.0)
('reg_lambda', 0.0)
('silent', True)
('subsample', 0.8)
('subsample_for_bin', 200000)
('subsample_freq', 0)
('device', 'gpu')
--------------------------------
